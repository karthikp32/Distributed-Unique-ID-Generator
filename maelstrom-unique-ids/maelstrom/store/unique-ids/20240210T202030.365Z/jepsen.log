2024-02-10 20:20:30,411{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 2d3b490b2c78969cc9914007bb41d21db1e33fc8 (plus uncommitted changes)
2024-02-10 20:20:30,411{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w unique-ids --bin /go/bin/maelstrom-unique-ids --time-limit 30 --rate 1000 --node-count 3 --availability total --nemesis partition
2024-02-10 20:20:30,544{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability :total
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x71bb6009"
         "maelstrom.db$db$reify__16142@71bb6009"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "unique-ids"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x232bfb3c" "2024-02-10T20:20:30.365Z"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x69cb296c"
         "maelstrom.net$jepsen_net$reify__15251@69cb296c"]
 :client
 #object[maelstrom.workload.unique_ids$client$reify__20074
         "0x3014c46f"
         "maelstrom.workload.unique_ids$client$reify__20074@3014c46f"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x6abd88fe"
         "java.util.concurrent.CyclicBarrier@6abd88fe"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x16337c8e"
         "jepsen.checker$compose$reify__11881@16337c8e"]
 :argv
 ("test"
  "-w"
  "unique-ids"
  "--bin"
  "/go/bin/maelstrom-unique-ids"
  "--time-limit"
  "30"
  "--rate"
  "1000"
  "--node-count"
  "3"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@2603a76d"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@3022287e"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/go/bin/maelstrom-unique-ids"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 30000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x6ba3eee9"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@6ba3eee9"],
                   :gen (jepsen.generator.Stagger
                         {:dt 20000000000,
                          :next-time nil,
                          :gen (jepsen.generator.FlipFlop
                                {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                "0x1d628a88"
                                                "jepsen.nemesis.combined$partition_package$start__16420@1d628a88"]
                                        ({:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         ...)],
                                 :i 0})})})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x4b48be5c"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@4b48be5c"],
                   :gen (jepsen.generator.Stagger
                         {:dt 2000000,
                          :next-time nil,
                          :gen (jepsen.generator.Repeat
                                {:remaining -1, :gen {:f :generate}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x3fe8d57a"
         "maelstrom.net$jepsen_os$reify__15254@3fe8d57a"]
 :time-limit 30
 :workload :unique-ids
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-02-10 20:20:33,278{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-02-10 20:20:33,280{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-02-10 20:20:33,283{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-02-10 20:20:33,292{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-02-10 20:20:33,295{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-02-10 20:20:33,297{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-02-10 20:20:33,298{GMT}	INFO	[jepsen node n1] maelstrom.process: launching /go/bin/maelstrom-unique-ids []
2024-02-10 20:20:33,298{GMT}	INFO	[jepsen node n2] maelstrom.process: launching /go/bin/maelstrom-unique-ids []
2024-02-10 20:20:33,301{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-02-10 20:20:33,301{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /go/bin/maelstrom-unique-ids []
2024-02-10 20:20:33,350{GMT}	WARN	[n1 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid dest for message #maelstrom.net.message.Message{:id 2, :src "n1", :dest "c0", :body {:in_reply_to 1, :type "init_ok"}}
(get queues (:dest m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:173)
	at maelstrom.net$validate_msg.invoke(net.clj:165)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:200)
	at maelstrom.net$send_BANG_.invoke(net.clj:188)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-10 20:20:33,361{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid dest for message #maelstrom.net.message.Message{:id 5, :src "n0", :dest "c1", :body {:in_reply_to 1, :type "init_ok"}}
(get queues (:dest m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:173)
	at maelstrom.net$validate_msg.invoke(net.clj:165)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:200)
	at maelstrom.net$send_BANG_.invoke(net.clj:188)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-10 20:20:33,378{GMT}	WARN	[n2 stdout] maelstrom.process: Error!
java.lang.AssertionError: Assert failed: Invalid dest for message #maelstrom.net.message.Message{:id 8, :src "n2", :dest "c2", :body {:in_reply_to 1, :type "init_ok"}}
(get queues (:dest m))
	at maelstrom.net$validate_msg.invokeStatic(net.clj:173)
	at maelstrom.net$validate_msg.invoke(net.clj:165)
	at maelstrom.net$send_BANG_.invokeStatic(net.clj:200)
	at maelstrom.net$send_BANG_.invoke(net.clj:188)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:147)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-10 20:20:33,380{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-02-10 20:20:33,477{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:generate	nil
2024-02-10 20:20:33,477{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:generate	nil
2024-02-10 20:20:33,480{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:minority-third
2024-02-10 20:20:33,480{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:generate	nil
2024-02-10 20:20:33,486{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n2" #{}, "n1" #{}, "n0" #{}}]
2024-02-10 20:20:35,566{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-02-10 20:20:35,567{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-02-10 20:20:38,481{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:generate	nil	:net-timeout
2024-02-10 20:20:38,484{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:generate	nil	:net-timeout
2024-02-10 20:20:38,485{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:invoke	:generate	nil
2024-02-10 20:20:38,485{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:invoke	:generate	nil
2024-02-10 20:20:38,481{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:generate	nil	:net-timeout
2024-02-10 20:20:38,493{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:generate	nil
2024-02-10 20:20:43,487{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:info	:generate	nil	:net-timeout
2024-02-10 20:20:43,488{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:info	:generate	nil	:net-timeout
2024-02-10 20:20:43,490{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:generate	nil
2024-02-10 20:20:43,492{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:invoke	:generate	nil
2024-02-10 20:20:43,494{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:info	:generate	nil	:net-timeout
2024-02-10 20:20:43,495{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:generate	nil
2024-02-10 20:20:44,831{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majority
2024-02-10 20:20:44,842{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{"n2" "n1"}, "n2" #{"n0"}, "n1" #{"n0"}}]
2024-02-10 20:20:48,490{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:info	:generate	nil	:net-timeout
2024-02-10 20:20:48,492{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:invoke	:generate	nil
2024-02-10 20:20:48,493{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:info	:generate	nil	:net-timeout
2024-02-10 20:20:48,496{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:invoke	:generate	nil
2024-02-10 20:20:48,495{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:info	:generate	nil	:net-timeout
2024-02-10 20:20:48,499{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:generate	nil
2024-02-10 20:20:50,496{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-02-10 20:20:50,497{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-02-10 20:20:53,492{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:info	:generate	nil	:net-timeout
2024-02-10 20:20:53,494{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:invoke	:generate	nil
2024-02-10 20:20:53,498{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:info	:generate	nil	:net-timeout
2024-02-10 20:20:53,499{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:info	:generate	nil	:net-timeout
2024-02-10 20:20:53,500{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:invoke	:generate	nil
2024-02-10 20:20:53,502{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:invoke	:generate	nil
2024-02-10 20:20:58,495{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:info	:generate	nil	:net-timeout
2024-02-10 20:20:58,496{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:invoke	:generate	nil
2024-02-10 20:20:58,502{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:info	:generate	nil	:net-timeout
2024-02-10 20:20:58,503{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:info	:generate	nil	:net-timeout
2024-02-10 20:20:58,504{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:invoke	:generate	nil
2024-02-10 20:20:58,506{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:generate	nil
2024-02-10 20:21:01,756{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majority
2024-02-10 20:21:01,770{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n2" #{"n1" "n0"}, "n1" #{"n2"}, "n0" #{"n2"}}]
2024-02-10 20:21:03,496{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:info	:generate	nil	:net-timeout
2024-02-10 20:21:03,504{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:info	:generate	nil	:net-timeout
2024-02-10 20:21:03,511{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:info	:generate	nil	:net-timeout
2024-02-10 20:21:03,572{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-02-10 20:21:03,682{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-02-10 20:21:03,689{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-02-10 20:21:03,700{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-02-10 20:21:05,335{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-02-10 20:21:05,336{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-02-10 20:21:05,590{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-02-10 20:21:05,606{GMT}	INFO	[jepsen results] jepsen.store: Wrote /workspaces/Distributed-Unique-ID-Generator/maelstrom-unique-ids/maelstrom/store/unique-ids/20240210T202030.365Z/results.edn
2024-02-10 20:21:05,670{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 18,
         :ok-count 0,
         :fail-count 0,
         :info-count 18,
         :by-f {:generate {:valid? false,
                           :count 18,
                           :ok-count 0,
                           :fail-count 0,
                           :info-count 18}}},
 :availability {:valid? false, :ok-fraction 0.0},
 :net {:all {:send-count 24,
             :recv-count 24,
             :msg-count 24,
             :msgs-per-op 1.3333334},
       :clients {:send-count 24, :recv-count 24, :msg-count 24},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true,
            :attempted-count 18,
            :acknowledged-count 0,
            :duplicated-count 0,
            :duplicated {},
            :range [nil nil]},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
